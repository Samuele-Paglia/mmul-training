# Exercise 007 - Create a custom template - Solutions

1) oc login -u developer --password casual https://192.168.42.154:8443
Login successful.
...

> oc new-project template-test
Now using project "template-test" on server "https://192.168.42.154:8443".
...

> oc new-app --name=my-template https://github.com/mmul-it/docker --context-dir=ncat-msg-http-port -o yaml > my-template.yaml

2) Edit my-template.yaml and:
   - Replace "items:" with "objects:";
   - Replace "name: ubuntu" in "name: ubuntu-${NAME}" inside the ImageStream object;
   - Replace every instance of
     "app: my-template" with "app: ${NAME}"
     "name: my-template" with "name: ${NAME}"
     "deploymentconfig: my-template" with "deploymentconfig: ${NAME}"
     "my-template:latest" with "${NAME}:latest"
   - Replace 'replicas: 1' inside DeploymentConfig spec: attribute with 
     "replicas: "${{REPLICAS}}""
   - Replace 'spec:ports:' attributes inside the Service object with 
     "name: ${NAME}-tcp" and "port: "${{PORT}}""
   - Replace 'kind: List' with 'kind: Template'
   - Replace 'metadata: {}' with
       metadata:
         name: my-template

> cat my-template.yaml
apiVersion: v1
objects:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: ${NAME}
    name: ubuntu-${NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: ubuntu:latest
      from:
        kind: DockerImage
        name: ubuntu:latest
      generation: null
      importPolicy: {}
      name: latest
      referencePolicy:
        type: ""
  status:
    dockerImageRepository: ""
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: ${NAME}
    name: ${NAME}
  spec:
    lookupPolicy:
      local: false
  status:
    dockerImageRepository: ""
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: ${NAME}
    name: ${NAME}
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    postCommit: {}
    resources: {}
    source:
      contextDir: ncat-msg-http-port
      git:
        uri: https://github.com/mmul-it/docker
      type: Git
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: ubuntu-${NAME}:latest
      type: Docker
    triggers:
    - github:
        secret: 6-iFOINNuKyBEsSkRvpL
      type: GitHub
    - generic:
        secret: qp_-Pn2HaY-7zSh_Nl90
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: ${NAME}
    name: ${NAME}
  spec:
    replicas: "${{REPLICAS}}"
    selector:
      app: ${NAME}
      deploymentconfig: ${NAME}
    strategy:
      resources: {}
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: ${NAME}
          deploymentconfig: ${NAME}
      spec:
        containers:
        - image: ${NAME}:latest
          name: ${NAME}
          ports:
          - containerPort: 8888
            protocol: TCP
          resources: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${NAME}
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: ${NAME}
    name: ${NAME}
  spec:
    ports:
    - name: ${NAME}-tcp
      port: "${{PORT}}"
      protocol: TCP
      targetPort: 8888
    selector:
      app: ${NAME}
      deploymentconfig: ${NAME}
  status:
    loadBalancer: {}
kind: Template
metadata:
  name: my-template

3) At the end of the file, add:

   parameters:
   - name: NAME
     description: The application name
     value: mmul
   - name: REPLICAS
     description: Replicas of the application
     value: "1"
   - name: PORT
     description: The Service port
     value: "8080"

> cat mmul-template.yaml
...
kind: Template
metadata:
  name: mmul-template
parameters:
- name: NAME
  description: The application name
  value: mmul
- name: REPLICAS
  description: Replicas of the application
  value: "1"
- name: PORT
  description: The Service port
  value: "8080"

4) oc create -f my-template.yaml 
template.template.openshift.io/my-template created

> oc get template
NAME            DESCRIPTION   PARAMETERS    OBJECTS
my-template                   3 (all set)   5

> oc describe template my-template
Name:		my-template
Namespace:	template-test
Created:	27 seconds ago
Labels:		<none>
Annotations:	<none>

Parameters:		 
    Name:		NAME
    Description:	The application name
    Required:		false
    Value:		mmul

    Name:		REPLICAS
    Description:	Replicas of the application
    Required:		false
    Value:		1

    Name:		PORT
    Description:	The Service port
    Required:		false
    Value:		8080


Object Labels:	<none>

Message:	<none>

Objects:				 
    ImageStream.image.openshift.io	ubuntu-${NAME}
    ImageStream.image.openshift.io	${NAME}
    BuildConfig.build.openshift.io	${NAME}
    DeploymentConfig.apps.openshift.io	${NAME}
    Service				${NAME}

5) oc new-app -p NAME=my-mmul-template my-template
--> Deploying template "template-test/my-template" to project template-test

     * With parameters:
        * NAME=my-mmul-template
        * REPLICAS=1
        * PORT=8080

--> Creating resources ...
    imagestream.image.openshift.io "ubuntu-my-mmul-template" created
    imagestream.image.openshift.io "my-mmul-template" created
    buildconfig.build.openshift.io "my-mmul-template" created
    deploymentconfig.apps.openshift.io "my-mmul-template" created
    service "my-mmul-template" created
--> Success
    Build scheduled, use 'oc logs -f bc/my-mmul-template' to track its progress.
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose svc/my-mmul-template' 
    Run 'oc status' to view your app.

> oc status
...
svc/my-mmul-template - 172.30.28.202:8080 -> 8888
  dc/my-mmul-template deploys istag/my-mmul-template:latest <-
    bc/my-mmul-template docker builds https://github.com/mmul-it/docker on istag/ubuntu-my-mmul-template:latest 
    deployment #1 deployed about a minute ago - 1 pod
...

> oc logs -f bc/my-mmul-template
...
Successfully built 7722942370fe
Pushing image 172.30.1.1:5000/template-test/my-mmul-template:latest ...
Push successful

6) oc expose svc/my-mmul-template
route.route.openshift.io/my-mmul-template exposed

> oc status
...
http://my-mmul-template-template-test.192.168.42.154.nip.io to pod port my-mmul-template-tcp (svc/my-mmul-template)
  dc/my-mmul-template deploys istag/my-mmul-template:latest <-
    bc/my-mmul-template docker builds https://github.com/mmul-it/docker on istag/ubuntu-my-mmul-template:latest 
    deployment #1 deployed 2 minutes ago - 1 pod
...

> curl http://my-mmul-template-template-test.192.168.42.154.nip.io
Container test

7) oc new-app -p NAME=my-mmul-template-bis -p PORT=9999 my-template
--> Deploying template "template-test/my-template" to project template-test

     * With parameters:
        * NAME=my-mmul-template-bis
        * REPLICAS=1
        * PORT=9999
...

> oc status
...
svc/my-mmul-template-bis - 172.30.38.49:9999 -> 8888
  dc/my-mmul-template-bis deploys istag/my-mmul-template-bis:latest <-
    bc/my-mmul-template-bis docker builds https://github.com/mmul-it/docker on istag/ubuntu-my-mmul-template-bis:latest 
    deployment #1 running for 2 seconds - 1 pod
...

> oc logs bc/my-mmul-template-bis
...
Successfully built 23c145cc5ced
Pushing image 172.30.1.1:5000/template-test/my-mmul-template-bis:latest ...
Push successful

> oc expose svc/my-mmul-template-bis
route.route.openshift.io/my-mmul-template-bis exposed

> oc status
...
http://my-mmul-template-bis-template-test.192.168.42.154.nip.io to pod port my-mmul-template-bis-tcp (svc/my-mmul-template-bis)
  dc/my-mmul-template-bis deploys istag/my-mmul-template-bis:latest <-
    bc/my-mmul-template-bis docker builds https://github.com/mmul-it/docker on istag/ubuntu-my-mmul-template-bis:latest 
    deployment #1 deployed 59 seconds ago - 1 pod
...

> curl http://my-mmul-template-bis-template-test.192.168.42.154.nip.io
Container test

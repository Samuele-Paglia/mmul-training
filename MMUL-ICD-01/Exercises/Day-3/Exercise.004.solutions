# Exercise 004 - Create and run your own compose stack - Solutions

1) > mkdir ex004
> cd ex004

2) > cat docker-compose.yml
version: "3"
services:
  web:
    image: "nginx:alpine"
    networks:
      - frontend
      - backend
    volumes:
      - data:/usr/share/nginx/html
  otherweb:
    image: "nginx:alpine"
    networks:
      - backend
    volumes:
      - data:/usr/share/nginx/html
volumes:
  data:
networks:
  frontend:
  backend:

3) > docker-compose up -d
Creating network "ex004_frontend" with the default driver
Creating network "ex004_backend" with the default driver
Creating volume "ex004_data" with default driver
Creating ex004_otherweb_1 ... done
Creating ex004_web_1      ... done

4) > docker exec ex004_web_1 ip a s
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
37: eth0@if38: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue state UP 
    link/ether 02:42:ac:14:00:03 brd ff:ff:ff:ff:ff:ff
    inet 172.20.0.3/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe14:3/64 scope link 
       valid_lft forever preferred_lft forever
39: eth1@if40: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue state UP 
    link/ether 02:42:ac:13:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.19.0.2/16 scope global eth1
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe13:2/64 scope link 
       valid_lft forever preferred_lft forever
	   
> docker exec ex004_otherweb_1 ip a s
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
35: eth0@if36: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue state UP 
    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.20.0.2/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe14:2/64 scope link 
       valid_lft forever preferred_lft forever

5) > docker exec ex004_web_1 wget -O- localhost
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
...

> docker exec ex004_otherweb_1 wget -O- localhost
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
...

6) > docker exec -it ex004_web_1 /bin/sh
/ # echo "Test compose" > /usr/share/nginx/html/index.html 
/ # exit

7) > docker exec ex004_web_1 wget -O- localhost
Connecting to localhost (127.0.0.1:80)
-                    100% |********************************|    13  0:00:00 ETA

Test compose

> docker exec ex004_otherweb_1 wget -O- localhost
Connecting to localhost (127.0.0.1:80)
-                    100% |********************************|    13  0:00:00 ETA
Test compose

The index.html file was changed into both container. This happen
because both path point at the same docker volume,

8) > docker-compose stop
Stopping ex004_web_1      ... done
Stopping ex004_otherweb_1 ... done

> docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES

> docker volume ls | grep ex004
local               ex004_data

> docker network ls | grep ex004
7e9f719e3bfc        ex004_backend       bridge              local
7b2349301a13        ex004_frontend      bridge              local

9) > docker-compose up -d
Starting ex004_otherweb_1 ... done
Starting ex004_web_1      ... done

> docker exec ex004_web_1 wget -O- localhost
Connecting to localhost (127.0.0.1:80)
-                    100% |********************************|    13  0:00:00 ETA

Test compose

> docker exec ex004_otherweb_1 wget -O- localhost
Connecting to localhost (127.0.0.1:80)
-                    100% |********************************|    13  0:00:00 ETA
Test compose

Either if containers was destroyed and recreated, we continue
to see the new index.html. This happen because docker volumes
wasn't deleted during application stack restarts.

